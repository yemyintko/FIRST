{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Digit Counting\n",
    "- Define a function that will return the **number of digits** in an integer.\n",
    "- You can safely assume that the integers are non-negative and will not begin with the number 0 other than the integer 0 itself.\n",
    "\n",
    "Example:\n",
    "- count_digits(1234)  => Expected result: 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Solution here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Bigger Sum\n",
    "- Define a function that takes three numbers as arguments and returns the **sum of the squares of the two larger numbers**.\n",
    "\n",
    "- For example, given the numbers 1, 2 and 3, since 2 and 3 are larger than 1, the `bigger_sum` function should return the integer value 13.\n",
    "\n",
    "Example: \n",
    "- bigger_sum(1,2,3) => Expected result = 13\n",
    "- bigger_sum(-1,2,10) => Expected result = 104\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Solution here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Leap Years\n",
    "- Write a function `is_leap_year` that takes one integer parameter and decides whether it corresponds to a leap year, i.e. `is_leap_year` returns **True** if the input parameter is a leap year, and **False** otherwise.\n",
    "\n",
    "- You can find any references to understand how to calculate Leap Years.\n",
    "\n",
    "Example:\n",
    "- is_leap_year(2000) => Expected result = True\n",
    "- is_leap_year(2100) => Expected result = False\n",
    "- is_leap_year(2014) => Expected result = False\n",
    "- is_leap_year(2104) => Expected result = True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Solution here"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 4. Area of Circle\n",
    "- Use `math` module.\n",
    "- Write a function `area_of_circle` that takes one integer parameter for **radius** , then return the **area of circle** as the result of calculation.\n",
    "\n",
    "Example:\n",
    "- area_of_circle(3) => Expected result = 28.274333882308138"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## Solution here\n"
   ]
  }
 ],
 "metadata": {
  "language_info": {
   "name": "python"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
